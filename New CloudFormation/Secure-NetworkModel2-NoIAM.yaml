AWSTemplateFormatVersion: '2010-09-09'
Description: Network Stack

## Parameters
Parameters:
  EC2InstanceSize:
    Default: "t2.micro"
    Description: Instance size for Web Servers.
    Type: String
    AllowedValues:
      - "t2.micro"

  AMIPreviousVersionIndex:
    Description: Number of previous version of AMI to use [0=current AMI through 15]
    Type: Number
    Default: 8
    MinValue: 0
    MaxValue: 15

  AmazonLinux2AmiId:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Description: Latest Amazon Linux 2 AMI ID. Leave default.
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'


## Metadata
Metadata:

## Friendly UI grouping for parameters
#        - AmazonLinux2AmiId
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Instance Configuration
        Parameters:
        - EC2InstanceSize
        # - MyTrustedNetwork
        - AMIPreviousVersionIndex


    ParameterLabels:
      EC2InstanceSize:
        default: EC2 Instance Size


## Mappings
Mappings:
  EC2AMI:
    us-east-1:
      AmznLinux: ami-0b8d0d6ac70e5750c
    us-east-2:
      AmznLinux: ami-01aeea5586d1cb5e9
    us-west-1:
      AmznLinux: ami-01cd822533dfab45e
    us-west-2:
      AmznLinux: ami-0e07063c9635a53aa
    eu-west-1:
      AmznLinux: ami-0a166fb5b1a5d9532
    ap-northeast-1:
      AmznLinux: ami-0148288598227344a

## Resources
Resources:

## The VPC
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      CidrBlock: !Sub 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', vpc]]

## Create an IGW & attach it to the VPC
  vpcIgw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', Igw]]
  attachIgwVpc:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref vpc
      InternetGatewayId: !Ref vpcIgw

## Create a public subnet in each AZ
  subAPublic:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Sub 10.0.1.0/24
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', PubSubA]]
  subBPublic:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Sub 10.0.2.0/24
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', PubSubB]]

## Associate the public subnets with a public route table
  rtbPublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', PubRoutes]]
  rteToIgw:
    Type: AWS::EC2::Route
    DependsOn: attachIgwVpc
    Properties:
      RouteTableId: !Ref rtbPublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref vpcIgw
  srtaAPublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subAPublic
      RouteTableId: !Ref rtbPublic
  srtaBPublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subBPublic
      RouteTableId: !Ref rtbPublic

## Create a private subnet in each AZ
  subAPrivate:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Sub 10.0.3.0/24
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', PrvSubA]]
  subBPrivate:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Sub 10.0.4.0/24
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', PrvSubB]]
  subCPrivate:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Sub 10.0.5.0/24
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', PrvSubC]]
  subDPrivate:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Sub 10.0.6.0/24
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', PrvSubD]]

## Create a NAT Gateway & EIP
  natEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  vpcNgw:
    Type: AWS::EC2::NatGateway
    DependsOn: attachIgwVpc
    Properties:
      AllocationId: !GetAtt natEip.AllocationId
      SubnetId: !Ref subAPublic
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', Ngw]]


## Create a NAT Gateway & EIP
  natEip1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  vpcNgw1:
    Type: AWS::EC2::NatGateway
    DependsOn: attachIgwVpc
    Properties:
      AllocationId: !GetAtt natEip1.AllocationId
      SubnetId: !Ref subBPublic
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', Ngw1]]


## Associate the private subnets with a natted route table
  rtbNat:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', NgwRoutes]]
  rteToNgw:
    Type: AWS::EC2::Route
    DependsOn: vpcNgw
    Properties:
      RouteTableId: !Ref rtbNat
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref vpcNgw

  ## Associate the private subnets with a natted route table
  rtbNat1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', NgwRoutes1]]
  rteToNgw1:
    Type: AWS::EC2::Route
    DependsOn: vpcNgw1
    Properties:
      RouteTableId: !Ref rtbNat1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref vpcNgw1

  srtaANgw:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subAPrivate
      RouteTableId: !Ref rtbNat
  srtaBNgw:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subBPrivate
      RouteTableId: !Ref rtbNat
  srtaCNgw:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subCPrivate
      RouteTableId: !Ref rtbNat1
  srtaDNgw:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subDPrivate
      RouteTableId: !Ref rtbNat1
## Configure ALB: security group, load balancer, route 53 endpoint
  
  sgLoadBalancer1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref vpc
      GroupDescription: Load Balancer Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          # CidrIp: !Ref MyTrustedNetwork
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Join ["" , [!Ref natEip, "/30"]]
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', AlbSg]]

  # sgLoadBalancer2:
  #   # Condition: UseAutomatedScanner
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     VpcId: !Ref vpc
  #     GroupDescription: Load Balancer Security Group
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 80
  #         ToPort: 80
          # CidrIp: !Ref MyTrustedNetwork
        # - IpProtocol: tcp
        #   FromPort: 80
        #   ToPort: 80
        #   CidrIp: !Ref ScannerIP01
        # - IpProtocol: tcp
        #   FromPort: 80
        #   ToPort: 80
      #   #   CidrIp: !Ref ScannerIP02
      #   - IpProtocol: tcp
      #     FromPort: 80
      #     ToPort: 80
      #     CidrIp: !Join ["" , [!Ref natEip, "/32"]]
      # Tags:
      #   - Key: Name
      #     Value: !Join ["-" , [!Ref 'AWS::StackName', AlbSg]]

  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Name: !Join ["-" , [!Ref 'AWS::StackName', Alb]]
      SecurityGroups: 
        - !GetAtt sgLoadBalancer1.GroupId
      Subnets: [ !Ref subAPublic, !Ref subBPublic ]
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', Alb]]

  AlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ["-" , [!Ref 'AWS::StackName', TargGrp]]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', TargGrp]]

  AlbListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: [ AlbTargetGroup ]
    Properties:
      LoadBalancerArn: !Ref Alb
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup

## Configure the ECS ASG, security group, launch configuration, IAM role, load balancer, cloudwatch log group, route53 endpoint
  sgEC2Sg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref vpc
      GroupDescription: EC2 Instance Security Group
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', EC2Sg]]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref 'sgLoadBalancer1'

#        Fn::FindInMap:
#        - EC2AMI
#        - !Ref AWS::Region
#        - AmznLinux

#        !Ref AmazonLinux2AmiId

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        ami-0b8d0d6ac70e5750c
      SecurityGroups:
      - !GetAtt sgEC2Sg.GroupId
      InstanceType: !Ref EC2InstanceSize
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install httpd -y
          systemctl start httpd
          systemctl enable httpd
          cd /var/www/html
          echo "this is my test site" > index.html
          

  AutoScalingGroup:
    DependsOn: Alb
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - !Ref subAPrivate
      - !Ref subBPrivate
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '2'
      MaxSize: '10'
      TargetGroupARNs:
      - !Ref AlbTargetGroup
      DesiredCapacity: '2'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 120
      Tags:
       -
        Key: Name
        Value: !Join ["-" , [!Ref 'AWS::StackName', node]]
        PropagateAtLaunch: true
    # CreationPolicy:
    #   ResourceSignal:
    #     Timeout: PT10M
    # UpdatePolicy:
    #   AutoScalingReplacingUpdate:
    #     WillReplace: 'true'


## Outputs
Outputs:
  cfnVersion:
    Value: 0.1
  accountId:
    Value: !Ref AWS::AccountId
  albEndpoint:
    Value: !Join ['', ['http://', !GetAtt Alb.DNSName]]
    Export:
      Name: !Sub '${AWS::StackName}-alb'
  vpc:
    Description: 'vpc.'
    Value: !Ref vpc
    Export:
      Name: !Sub '${AWS::StackName}-vpc'
  VpcId:
    Value: !Ref vpc
    Export:
      Name: 'VpcId'
  SubnetsPublic:
    Description: 'Subnets public.'
    Value: !Join [',', [!Ref subAPublic, !Ref subBPublic]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPublic'
  SubnetsPrivate1:
    Description: 'Subnets private1.'
    Value: !Join [',', [!Ref subAPrivate, !Ref subBPrivate]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPrivate1'

  SubnetsPrivate2:
    Description: 'Subnets private.'
    Value: !Join [',', [!Ref subCPrivate, !Ref subDPrivate]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPrivate'
  RouteTablesPrivate1:
    Description: 'Route tables private.'
    Value: !Join [',', [!Ref srtaANgw, !Ref srtaBNgw]]
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablesPrivate1'
  RouteTablesPrivate2:
    Description: 'Route tables private.'
    Value: !Join [',', [!Ref srtaCNgw, !Ref srtaDNgw]]
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablesPrivate'

  RouteTablesPublic:
    Description: 'Route tables public.'
    Value: !Join [',', [!Ref srtaAPublic, !Ref srtaBPublic]]
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablesPublic'
  subAPublic:
    Description: 'Subnet A public.'
    Value: !Ref subAPublic
    Export:
      Name: !Sub '${AWS::StackName}-subAPublic'
  RouteTableAPublic:
    Description: 'Route table A public.'
    Value: !Ref srtaAPublic
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableAPublic'
  subAPrivate:
    Description: 'Subnet A private.'
    Value: !Ref subAPrivate
    Export:
      Name: !Sub '${AWS::StackName}-subAPrivate'      
  RouteTableAPrivate:
    Description: 'Route table A private.'
    Value: !Ref srtaANgw
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableAPrivate'
  subBPublic:
    Description: 'Subnet B public.'
    Value: !Ref subBPublic
    Export:
      Name: !Sub '${AWS::StackName}-subBPublic'
  RouteTableBPublic:
    Description: 'Route table B public.'
    Value: !Ref srtaBPublic
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableBPublic'
  subBPrivate:
    Description: 'Subnet B private.'
    Value: !Ref subBPrivate
    Export:
      Name: !Sub '${AWS::StackName}-subBPrivate'   
  RouteTableBPrivate:
    Description: 'Route table B private.'
    Value: !Ref srtaBNgw
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableBPrivate'

  subCPrivate:
    Description: 'Subnet C private.'
    Value: !Ref subCPrivate
    Export:
      Name: !Sub '${AWS::StackName}-subCPrivate'   
  RouteTableCPrivate:
    Description: 'Route table C private.'
    Value: !Ref srtaCNgw
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableCPrivate'
  RouteTableIDPublic:
    Description: 'Route table ID public.'
    Value: !Ref rtbPublic
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableIDPublic'


  RouteTableIDPrivate:
    Description: 'Route table ID private.'
    Value: !Ref rtbNat
    Export:
     Name: !Sub '${AWS::StackName}-RouteTableIDPrivate'


  subDPrivate:
    Description: 'Subnet D private.'
    Value: !Ref subDPrivate
    Export:
      Name: !Sub '${AWS::StackName}-subDPrivate'   
  RouteTableDPrivate:
    Description: 'Route table D private.'
    Value: !Ref srtaDNgw
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableDPrivate'
